// Code generated by MockGen. DO NOT EDIT.
// Source: repositories_gateway.go

// Package gateway is a generated GoMock package.
package gateway

import (
	context "context"
	reflect "reflect"
	time "time"

	dto "github.com/EvertonTomalok/marketplace-health/internal/domain/dto"
	entities "github.com/EvertonTomalok/marketplace-health/internal/infra/postgres/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockWorkerGateway is a mock of WorkerGateway interface.
type MockWorkerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerGatewayMockRecorder
}

// MockWorkerGatewayMockRecorder is the mock recorder for MockWorkerGateway.
type MockWorkerGatewayMockRecorder struct {
	mock *MockWorkerGateway
}

// NewMockWorkerGateway creates a new mock instance.
func NewMockWorkerGateway(ctrl *gomock.Controller) *MockWorkerGateway {
	mock := &MockWorkerGateway{ctrl: ctrl}
	mock.recorder = &MockWorkerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerGateway) EXPECT() *MockWorkerGatewayMockRecorder {
	return m.recorder
}

// FindById mocks base method.
func (m *MockWorkerGateway) FindById(ctx context.Context, workerId int64) (entities.Worker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, workerId)
	ret0, _ := ret[0].(entities.Worker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockWorkerGatewayMockRecorder) FindById(ctx, workerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockWorkerGateway)(nil).FindById), ctx, workerId)
}

// MockFacilityRequirementsGateway is a mock of FacilityRequirementsGateway interface.
type MockFacilityRequirementsGateway struct {
	ctrl     *gomock.Controller
	recorder *MockFacilityRequirementsGatewayMockRecorder
}

// MockFacilityRequirementsGatewayMockRecorder is the mock recorder for MockFacilityRequirementsGateway.
type MockFacilityRequirementsGatewayMockRecorder struct {
	mock *MockFacilityRequirementsGateway
}

// NewMockFacilityRequirementsGateway creates a new mock instance.
func NewMockFacilityRequirementsGateway(ctrl *gomock.Controller) *MockFacilityRequirementsGateway {
	mock := &MockFacilityRequirementsGateway{ctrl: ctrl}
	mock.recorder = &MockFacilityRequirementsGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacilityRequirementsGateway) EXPECT() *MockFacilityRequirementsGatewayMockRecorder {
	return m.recorder
}

// FindRequirementsByFacilitiesId mocks base method.
func (m *MockFacilityRequirementsGateway) FindRequirementsByFacilitiesId(ctx context.Context, facilitiesId []int64) (map[int64]entities.FacilityRequirementAggregated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRequirementsByFacilitiesId", ctx, facilitiesId)
	ret0, _ := ret[0].(map[int64]entities.FacilityRequirementAggregated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRequirementsByFacilitiesId indicates an expected call of FindRequirementsByFacilitiesId.
func (mr *MockFacilityRequirementsGatewayMockRecorder) FindRequirementsByFacilitiesId(ctx, facilitiesId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRequirementsByFacilitiesId", reflect.TypeOf((*MockFacilityRequirementsGateway)(nil).FindRequirementsByFacilitiesId), ctx, facilitiesId)
}

// MockFacilityGateway is a mock of FacilityGateway interface.
type MockFacilityGateway struct {
	ctrl     *gomock.Controller
	recorder *MockFacilityGatewayMockRecorder
}

// MockFacilityGatewayMockRecorder is the mock recorder for MockFacilityGateway.
type MockFacilityGatewayMockRecorder struct {
	mock *MockFacilityGateway
}

// NewMockFacilityGateway creates a new mock instance.
func NewMockFacilityGateway(ctrl *gomock.Controller) *MockFacilityGateway {
	mock := &MockFacilityGateway{ctrl: ctrl}
	mock.recorder = &MockFacilityGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacilityGateway) EXPECT() *MockFacilityGatewayMockRecorder {
	return m.recorder
}

// FindActive mocks base method.
func (m *MockFacilityGateway) FindActive(ctx context.Context) ([]entities.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindActive", ctx)
	ret0, _ := ret[0].([]entities.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindActive indicates an expected call of FindActive.
func (mr *MockFacilityGatewayMockRecorder) FindActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindActive", reflect.TypeOf((*MockFacilityGateway)(nil).FindActive), ctx)
}

// FindById mocks base method.
func (m *MockFacilityGateway) FindById(ctx context.Context, facilityId int64) (entities.Facility, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", ctx, facilityId)
	ret0, _ := ret[0].(entities.Facility)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockFacilityGatewayMockRecorder) FindById(ctx, facilityId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockFacilityGateway)(nil).FindById), ctx, facilityId)
}

// MockShiftGateway is a mock of ShiftGateway interface.
type MockShiftGateway struct {
	ctrl     *gomock.Controller
	recorder *MockShiftGatewayMockRecorder
}

// MockShiftGatewayMockRecorder is the mock recorder for MockShiftGateway.
type MockShiftGatewayMockRecorder struct {
	mock *MockShiftGateway
}

// NewMockShiftGateway creates a new mock instance.
func NewMockShiftGateway(ctrl *gomock.Controller) *MockShiftGateway {
	mock := &MockShiftGateway{ctrl: ctrl}
	mock.recorder = &MockShiftGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShiftGateway) EXPECT() *MockShiftGatewayMockRecorder {
	return m.recorder
}

// FindShifts mocks base method.
func (m *MockShiftGateway) FindShifts(ctx context.Context, profession entities.Profession, startTime, endTime *time.Time, workerID *int64, offset, limit int64, betweenDates *[]dto.BetweenDates) ([]entities.Shift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShifts", ctx, profession, startTime, endTime, workerID, offset, limit, betweenDates)
	ret0, _ := ret[0].([]entities.Shift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShifts indicates an expected call of FindShifts.
func (mr *MockShiftGatewayMockRecorder) FindShifts(ctx, profession, startTime, endTime, workerID, offset, limit, betweenDates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShifts", reflect.TypeOf((*MockShiftGateway)(nil).FindShifts), ctx, profession, startTime, endTime, workerID, offset, limit, betweenDates)
}

// FindShiftsByFacilities mocks base method.
func (m *MockShiftGateway) FindShiftsByFacilities(ctx context.Context, facilitiesIds []int64, profession entities.Profession, startTime, endTime *time.Time, offset, limit int64, betweenDates *[]dto.BetweenDates) ([]entities.Shift, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindShiftsByFacilities", ctx, facilitiesIds, profession, startTime, endTime, offset, limit, betweenDates)
	ret0, _ := ret[0].([]entities.Shift)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindShiftsByFacilities indicates an expected call of FindShiftsByFacilities.
func (mr *MockShiftGatewayMockRecorder) FindShiftsByFacilities(ctx, facilitiesIds, profession, startTime, endTime, offset, limit, betweenDates interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindShiftsByFacilities", reflect.TypeOf((*MockShiftGateway)(nil).FindShiftsByFacilities), ctx, facilitiesIds, profession, startTime, endTime, offset, limit, betweenDates)
}

// MockDocumentWorkerGateway is a mock of DocumentWorkerGateway interface.
type MockDocumentWorkerGateway struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentWorkerGatewayMockRecorder
}

// MockDocumentWorkerGatewayMockRecorder is the mock recorder for MockDocumentWorkerGateway.
type MockDocumentWorkerGatewayMockRecorder struct {
	mock *MockDocumentWorkerGateway
}

// NewMockDocumentWorkerGateway creates a new mock instance.
func NewMockDocumentWorkerGateway(ctrl *gomock.Controller) *MockDocumentWorkerGateway {
	mock := &MockDocumentWorkerGateway{ctrl: ctrl}
	mock.recorder = &MockDocumentWorkerGatewayMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentWorkerGateway) EXPECT() *MockDocumentWorkerGatewayMockRecorder {
	return m.recorder
}

// FindDocumentsIds mocks base method.
func (m *MockDocumentWorkerGateway) FindDocumentsIds(ctx context.Context, workerId int64) ([]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDocumentsIds", ctx, workerId)
	ret0, _ := ret[0].([]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDocumentsIds indicates an expected call of FindDocumentsIds.
func (mr *MockDocumentWorkerGatewayMockRecorder) FindDocumentsIds(ctx, workerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDocumentsIds", reflect.TypeOf((*MockDocumentWorkerGateway)(nil).FindDocumentsIds), ctx, workerId)
}
